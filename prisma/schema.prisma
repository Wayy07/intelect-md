// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  favorites     FavoriteProduct[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// E-commerce Models
model Order {
  id            String    @id @default(cuid())
  orderNumber   String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        String    @default("PENDING")
  total         Float
  paymentMethod String
  financingTerm Int?      // Number of months for financing (optional)
  userId        String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  customer      CustomerInfo @relation(fields: [customerInfoId], references: [id])
  customerInfoId String     @unique

  items         OrderItem[]
}

model CustomerInfo {
  id           String  @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  phone        String
  address      String?
  city         String?

  order        Order?
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  productId String
  name      String
  code      String
  imageUrl  String?

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model FavoriteProduct {
  id          String   @id @default(cuid())
  productId   String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Additional e-commerce models could be added here, such as:
// - Product
// - Category
// - Review
// etc.
